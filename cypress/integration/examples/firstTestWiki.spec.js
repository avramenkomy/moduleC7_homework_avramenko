context("get wiki", () => {
    //beforeEach позволяет выполнить какое-то действие до выполнения самого теста "it"
    beforeEach(() => {
        cy.visit('https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F')
        
    });

    //синтаксис аналогичен jest, в it передается строка с описанием теста и callback
    //Протестируем заголовок h1, с помощью API cypress можно обратиться к элементу в DOM по его селектору с помощью метода cy.get.
    it('check h1 node in web page', () => {        
        cy.get(".firstHeading").then(data => { //здесь then не относится к promise
            //Получим контент внутри элемента
            const header = data[0].innerText; //Тестирование программного обеспечения
            //сравним текст внутри элемента с эталонным, с помощью метода .to.deep.eq() - метод для глубокого сравнения
            expect(header).to.deep.eq("Тестирование программного обеспечения");
            //в панели управления cypress слева будет сообщение об успешном прохождении теста 
        });
    });
});